// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

targetScope = 'resourceGroup'
// Common configurations
@description('Name of the environment')
param environmentName string
@description('Principal ID to grant access to the AI services. Leave empty to skip')
param myPrincipalId string = ''
@description('Current principal type being used')
@allowed(['User', 'ServicePrincipal'])
param myPrincipalType string
@description('Tags for all AI resources created. JSON object')
param tags object = {}

// AI Services configurations
@description('Name of the AI Services account. Automatically generated if left blank')
param aiServicesName string = ''
@description('Name of the AI Hub resource. Automatically generated if left blank')
param aiHubName string = ''
@description('Name of the Storage Account. Automatically generated if left blank')
param storageName string = ''
@description('Name of the Storage Account used by AppService for chat session data and patient data. Automatically generated if left blank')
param appStorageName string = ''
@description('Name of the Key Vault. Automatically generated if left blank')
param keyVaultName string = ''

// Other configurations
@description('Name of the Bot Service. Automatically generated if left blank')
param msiName string = ''
@description('Name of the App Service Plan. Automatically generated if left blank')
param appPlanName string = ''
@description('Name of the App Services Instance. Automatically generated if left blank')
param appName string = ''

@description('Gen AI model name and version to deploy')
@allowed(['gpt-4o;2024-08-06', 'gpt-4.1;2025-04-14'])
param model string
@description('Tokens per minute capacity for the model. Units of 1000 (capacity = 100 means 100K tokens per minute)')
param modelCapacity int
// https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/deployment-types
@description('Specify the deployment type of the model. Only allow deployment types where data processing and data storage is within the specified Azure geography.')
@allowed(['Standard', 'DataZoneStandard','GlobalStandard'])
param modelSku string

@description('Location to deploy AI Services')
param gptDeploymentLocation string = resourceGroup().location
@description('Location to deploy HLS models')
param hlsDeploymentLocation string = resourceGroup().location
@description('HLS model endpoints. This is usually auto-generated by the HLS model deployment module, but can be overridden here.')
param hlsModelEndpoints object = {}

@description('Instance type for HLS models')
param instanceType string = ''

@description('Location to deploy App Service')
param appServiceLocation string = resourceGroup().location
@description('Location to deploy Bot Service')
param botServiceLocation string = 'global'
@description('Location to deploy Healthcare Agent Service')
param healthcareAgentServiceLocation string = resourceGroup().location
@description('Location to deploy Key Vault')
param keyVaultLocation string = resourceGroup().location
@description('Location to deploy Managed Identity')
param msiLocation string = resourceGroup().location
param storageAccountLocation string = resourceGroup().location
@description('By default, all tenant IDs are allowed. If a comma-separated list of tenant IDs is provided, only those tenant IDs and the tenant ID of the AppService will be allowed to access the AppService. Use "*" to allow all tenant IDs.')
param additionalAllowedTenantIds string = '*'
@description('By default, all users are allowed. If a comma-separated list of user IDs is provided, only those user IDs and the user ID of the deployer will be allowed to access the AppService. User ID can be looked up in Microsoft Entra. Use "*" to allow all users.')
param additionalAllowedUserIds string = '*'

@description('Alternative GPT model endpoint. This only affects the reasoning model')
param aiEndpointReasoningOverride string = ''
@description('Alternative GPT model deployment name for the reasoning model.')
param azureOpenaiDeploymentNameReasoningModelOverride string = ''

@description('Client ID for the Azure AD application used for authentication. Leave empty to skip')
param authClientId string = ''

@description('Additional IP addresses or ranges to allow access to the App Service (comma-separated list, e.g., "192.168.1.100/32,10.0.0.0/24")')
param additionalAllowedIps string = ''

@description('The scenario to use for the deployment.')
param scenario string = 'default'

@secure()
param graphRagSubscriptionKey string = ''

@description('Storage location type for clincal notes. Options: fhir, blob, fabric.')
param clinicalNotesSource string = 'blob'

@description('FHIR Service endpoint for retrieving clinical notes')
param fhirServiceEndpoint string = ''
@description('The Microsoft Fabric User Data Function Endpoint.')
param fabricUserDataFunctionEndpoint string = ''

@description('Name of the Application Insights instance. Automatically generated if left blank')
param appInsightsName string = ''

var modelName = split(model, ';')[0]
var modelVersion = split(model, ';')[1]

var abbrs = loadJsonContent('abbreviations.json')
var uniqueSuffix = substring(uniqueString(subscription().id, environmentName), 1, 3)
var location = resourceGroup().location

// Network configurations
@description('Name of the Virtual Network. Automatically generated if left blank')
param vnetName string = ''
@description('Virtual network address prefixes')
param vnetAddressPrefixes array = ['10.0.0.0/16']
@description('Location for service endpoints')
param serviceEndpointLocation string = '*'
@description('Subnet configurations for the virtual network')
param subnets array = [
  {
    name: 'appservice-subnet'
    addressPrefix: '10.0.1.0/24'
    delegation: 'Microsoft.Web/serverFarms'
    serviceEndpoints: [                                                            
      {
        service: 'Microsoft.Web'
        locations: [serviceEndpointLocation]
      }
      {
        service: 'Microsoft.KeyVault'
        locations: [serviceEndpointLocation]
      }
      {
        service: 'Microsoft.Storage'
        locations: [serviceEndpointLocation]
      }
    ]
    securityRules: [
      {
        name: 'AllowHTTPSInbound'
        properties: {
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '443'
          sourceAddressPrefix: '*'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 1000
          direction: 'Inbound'
        }
      }
      {
        name: 'AllowHTTPInbound'
        properties: {
          protocol: 'Tcp'
          sourcePortRange: '*'
          destinationPortRange: '80'
          sourceAddressPrefix: '*'
          destinationAddressPrefix: '*'
          access: 'Allow'
          priority: 1010
          direction: 'Inbound'
        }
      }
      {
        name: 'AllowAzureServicesOutbound'
        properties: {
          protocol: '*'
          sourcePortRange: '*'
          destinationPortRange: '*'
          sourceAddressPrefix: 'VirtualNetwork'
          destinationAddressPrefix: 'AzureCloud'
          access: 'Allow'
          priority: 1000
          direction: 'Outbound'
        }
      }
      {
        name: 'AllowInternetOutbound'
        properties: {
          protocol: '*'
          sourcePortRange: '*'
          destinationPortRange: '*'
          sourceAddressPrefix: 'VirtualNetwork'
          destinationAddressPrefix: 'Internet'
          access: 'Allow'
          priority: 1010
          direction: 'Outbound'
        }
      }
    ]
  }
]

var names = {
  msi: !empty(msiName) ? msiName : '${abbrs.managedIdentityUserAssignedIdentities}${environmentName}-${uniqueSuffix}'
  appPlan: !empty(appPlanName) ? appPlanName : '${abbrs.webSitesAppServiceEnvironment}${environmentName}-${uniqueSuffix}'
  app: !empty(appName) ? appName : '${abbrs.webSitesAppService}${environmentName}-${uniqueSuffix}'
  aiServices: !empty(aiServicesName) ? aiServicesName : '${abbrs.cognitiveServicesAccounts}${environmentName}-${uniqueSuffix}'
  aiHub: !empty(aiHubName) ? aiHubName : '${abbrs.cognitiveServicesAccounts}hub-${environmentName}-${uniqueSuffix}'
  // Modified to next two lines to lower case the string per azure storage account naming conventions. This was causing a deployment error
  storage: toLower(!empty(storageName) ? storageName : replace(replace('${abbrs.storageStorageAccounts}${environmentName}${uniqueSuffix}', '-', ''), '_', ''))
  appStorage: toLower(!empty(appStorageName) ? appStorageName : replace(replace('${abbrs.storageStorageAccounts}app${environmentName}${uniqueSuffix}', '-', ''), '_', ''))
  keyVault: !empty(keyVaultName) ? keyVaultName : '${abbrs.keyVaultVaults}${environmentName}-${uniqueSuffix}'
  appInsights: !empty(appInsightsName) ? appInsightsName : '${abbrs.insightsComponents}${environmentName}-${uniqueSuffix}'
  ahdsWorkspaceName: replace('ahds${environmentName}${uniqueSuffix}', '-', '')
  ahdsFhirServiceName: replace('fhir${environmentName}${uniqueSuffix}', '-', '')
  vnet: !empty(vnetName) ? vnetName : '${abbrs.networkVirtualNetworks}${environmentName}-${uniqueSuffix}'

}

var agentConfigs = {
  default: loadYamlContent('../src/scenarios/default/config/agents.yaml')
  //nursehuddle: loadYamlContent('../src/scenarios/nursehuddle/config/agents.yaml')
  //Add other scenarios here as needed
}

var allAgents = agentConfigs[scenario]

var agents = allAgents

var healthcareAgents = filter(allAgents, agent => contains(agent, 'healthcare_agent'))
var hasHealthcareAgentNeedingRadiologyModels = contains(map(healthcareAgents, agent => toLower(agent.name)), 'radiology')
var hasHlsModelEndpoints = !empty(hlsModelEndpoints.cxr_report_gen)

module m_appServicePlan 'modules/appserviceplan.bicep' = {
  name: 'deploy_app_service_plan'
  params: {
    location: empty(appServiceLocation) ? location : appServiceLocation
    appServicePlanName: names.appPlan
    tags: tags
  }
}

// Network module - deploy VNet and subnets for enhanced security
module m_network 'modules/network.bicep' = {
  name: 'deploy_network'
  params: {
    location: empty(appServiceLocation) ? location : appServiceLocation
    vnetName: names.vnet
    vnetAddressPrefixes: vnetAddressPrefixes
    subnets: subnets
    tags: tags
  }
}

module m_msi 'modules/msi.bicep' =[for i in agents:  {
  name: '${i.name}_deploy_msi'
  params: {
    location: empty(msiLocation) ? location : msiLocation
    msiName: i.name
    tags: tags
  }
  dependsOn: [
    // Ensure app service plan creation completes first to confirm quota availability.
    m_appServicePlan 
  ]
}]

// AI Services module
module m_aiservices 'modules/aistudio/aiservices.bicep' = {
  name: 'deploy_aiservices'
  params: {
    location: empty(gptDeploymentLocation) ? location : gptDeploymentLocation
    aiServicesName: names.aiServices
    grantAccessTo: [
          {
            id: myPrincipalId
            type: myPrincipalType
          }
        ]
    tags: tags
    additionalIdentities: [
      for i in range(0, length(agents)): m_msi[i].outputs.msiPrincipalID
    ]
  }
}

module m_keyVault 'modules/aistudio/keyVault.bicep' = {
  name: 'deploy_keyVault'
  params: {
    location: empty(keyVaultLocation) ? location : keyVaultLocation
    keyVaultName: names.keyVault
    appServiceSubnetId: m_network.outputs.appServiceSubnetId
    grantAccessTo: [
        {
          id: myPrincipalId
          type: myPrincipalType
        }
      ]
    tags: tags
    additionalIdentities: [
      for i in range(0, length(agents)): m_msi[i].outputs.msiPrincipalID
    ]
  }
}

// AI Hub module - deploys AI Hub and Project
module m_aihub 'modules/aistudio/aihub.bicep' = {
  name: 'deploy_ai'
  params: {
    location: empty(hlsDeploymentLocation) ? location : hlsDeploymentLocation
    aiHubName: names.aiHub
    aiProjectName: 'cog-ai-prj-${environmentName}-${uniqueSuffix}'
    storageName: names.storage
    aiServicesName: m_aiservices.outputs.aiServicesName
    keyVaultName: m_keyVault.outputs.keyVaultName
    grantAccessTo:  [
          {
            id: myPrincipalId
            type: myPrincipalType
          }
        ]
    tags: tags
    additionalIdentities: [
      for i in range(0, length(agents)): m_msi[i].outputs.msiPrincipalID
    ]
  }
}

module hlsModels 'modules/hlsModel.bicep' = if (!hasHlsModelEndpoints) {
  name: 'deploy_hls_models'
  params: {
    location: empty(hlsDeploymentLocation) ? location : hlsDeploymentLocation
    workspaceName: 'cog-ai-prj-${environmentName}-${uniqueSuffix}'
    instanceType: instanceType
    includeRadiologyModels: empty(healthcareAgents) ? true : !hasHealthcareAgentNeedingRadiologyModels
  }
  dependsOn: [
    m_aihub
  ]
}

module m_gpt 'modules/gptDeployment.bicep' = {
  name: 'deploygpt'
  params: {
    aiServicesName: m_aiservices.outputs.aiServicesName
    modelName: modelName
    modelVersion: modelVersion
    modelCapacity: modelCapacity
    modelSku: modelSku
  }
}

module m_appStorageAccount 'modules/storageAccount.bicep' = {
  name: 'deploy_storage_account'
  params: {
    location: empty(storageAccountLocation) ? location : storageAccountLocation
    storageAccountName: names.appStorage
    grantAccessTo: [
      {
        id: myPrincipalId
        type: myPrincipalType
      }
      {
        id: m_msi[0].outputs.msiPrincipalID
        type: 'ServicePrincipal'
      }
    ]
    tags: tags
  }
}
var shouldDeployFhirService = clinicalNotesSource == 'fhir' && empty(fhirServiceEndpoint)

module m_fhirService 'modules/fhirService.bicep' = if (shouldDeployFhirService) {
  name: 'deploy_fhir_service'
  params: {
    workspaceName: names.ahdsWorkspaceName
    fhirServiceName: names.ahdsFhirServiceName
    tenantId: subscription().tenantId
    dataContributors: [
      {
        id: myPrincipalId
        type: myPrincipalType
      }
    ]
    dataReaders: [
      {
        id: m_msi[0].outputs.msiPrincipalID
        type: 'ServicePrincipal'
      }
    ]
  }
}

var outHlsModelEndpoints = hasHlsModelEndpoints ? hlsModelEndpoints : toObject(hlsModels!.outputs.modelEndpoints, model => model.name, model => model.endpoint)
var outFhirServiceEndpoint = shouldDeployFhirService ? m_fhirService!.outputs.endpoint : fhirServiceEndpoint

module m_app 'modules/appservice.bicep' = {
  name: 'deploy_app'
  params: {
    location: empty(appServiceLocation) ? location : appServiceLocation
    appServicePlanId: m_appServicePlan.outputs.appServicePlanId
    appServiceName: names.app
    tags: tags
    deploymentName: m_gpt.outputs.modelName
    deploymentNameReasoningModel: empty(azureOpenaiDeploymentNameReasoningModelOverride) ? m_gpt.outputs.modelName : azureOpenaiDeploymentNameReasoningModelOverride
    openaiEnpoint: m_aiservices.outputs.aiServicesEndpoint
    openaiEndpointReasoningModel: empty(aiEndpointReasoningOverride) ? m_aiservices.outputs.aiServicesEndpoint : aiEndpointReasoningOverride
    aiProjectName: m_aihub.outputs.aiProjectName
    msis: [
      for i in range(0, length(agents)): {
        msiClientID: m_msi[i].outputs.msiClientID
        msiID: m_msi[i].outputs.msiID
        name: agents[i].name
      }
    ]
    modelEndpoints: outHlsModelEndpoints
    authClientId: authClientId
    appBlobStorageEndpoint: m_appStorageAccount.outputs.storageAccountBlobEndpoint
    graphRagSubscriptionKey: graphRagSubscriptionKey
    keyVaultName: m_keyVault.outputs.keyVaultName
    scenario: scenario
    // Pass Application Insights connection string as environment variable
    applicationInsightsConnectionString: m_appInsights.outputs.connectionString
    
    clinicalNotesSource: clinicalNotesSource
    fhirServiceEndpoint: fhirServiceEndpoint
    fabricUserDataFunctionEndpoint: fabricUserDataFunctionEndpoint
    appServiceSubnetId: m_network.outputs.appServiceSubnetId
    additionalAllowedIps: additionalAllowedIps
    additionalAllowedTenantIds: additionalAllowedTenantIds
    additionalAllowedUserIds: additionalAllowedUserIds
  }
}

module m_bot 'modules/botservice.bicep' = {
  name: 'deploy_bots'
  params: {
    location: empty(botServiceLocation) ? location : botServiceLocation
    tags: tags
    appBackend: m_app.outputs.backendHostName
    bots: [
      for i in range(0, length(agents)): {
        msiClientID: m_msi[i].outputs.msiClientID
        msiID: m_msi[i].outputs.msiID
        name: agents[i].name
      }
    ]
  }
}

module m_healthcareAgentService 'modules/healthcareAgentService.bicep' = if (!empty(healthcareAgents)) {
  name: 'deploy_healthcare_agents'
  params: {
    location: empty(healthcareAgentServiceLocation) ? location : healthcareAgentServiceLocation
    sku: 'F0'
    tags: tags
    bots: [
      for i in range(0, length(healthcareAgents)): {
        name: healthcareAgents[i].name
        msiID: m_msi[indexOf(map(allAgents, a => a.name), healthcareAgents[i].name)].outputs.msiID
      }
    ]
    keyVaultName: m_keyVault.outputs.keyVaultName
  }
}

// Deploy Application Insights
module m_appInsights 'modules/appinsights.bicep' = {
  name: 'deploy_app_insights'
  params: {
    appInsightsName: names.appInsights
    location: location
    tags: tags
    grantAccessTo: [
      for i in range(0, length(agents)): {
        id: m_msi[i].outputs.msiPrincipalID
        type: 'ServicePrincipal'
      }
    ]
  }
}

output AZURE_TENANT_ID string = tenant().tenantId
output AZURE_RESOURCE_GROUP_ID string = resourceGroup().id
output AZURE_RESOURCE_GROUP_NAME string = resourceGroup().name
output AI_SERVICES_ENDPOINT string = m_aiservices.outputs.aiServicesEndpoint
output BACKEND_APP_HOSTNAME string = m_app.outputs.backendHostName
output MSI_PRINCIPAL_ID string = m_msi[0].outputs.msiPrincipalID
output AZURE_BOTS array = [for i in range(0, length(agents)): {name: agents[i].name, botId: m_msi[i].outputs.msiClientID}]
output BOT_IDS string = string(m_app.outputs.botIds)
output APP_STORAGE_ACCOUNT_NAME string = m_appStorageAccount.outputs.storageAccountName
output APP_BLOB_STORAGE_ENDPOINT string = m_appStorageAccount.outputs.storageAccountBlobEndpoint
output AZURE_OPENAI_API_ENDPOINT string = m_aiservices.outputs.aiServicesEndpoint
output AZURE_OPENAI_ENDPOINT string = m_aiservices.outputs.aiServicesEndpoint
output AZURE_OPENAI_DEPLOYMENT_NAME string = m_gpt.outputs.modelName
output AZURE_OPENAI_DEPLOYMENT_NAME_REASONING_MODEL string = m_gpt.outputs.modelName
output AZURE_OPENAI_REASONING_MODEL_ENDPOINT string = empty(aiEndpointReasoningOverride) ? m_aiservices.outputs.aiServicesEndpoint : aiEndpointReasoningOverride
output AZURE_AI_PROJECT_CONNECTION_STRING string = m_aihub.outputs.aiProjectConnectionString
output FHIR_SERVICE_ENDPOINT string = outFhirServiceEndpoint
output FABRIC_USER_DATA_FUNCTION_ENDPOINT string = fabricUserDataFunctionEndpoint
output HLS_MODEL_ENDPOINTS string = string(outHlsModelEndpoints)
output KEYVAULT_ENDPOINT string = m_keyVault.outputs.keyVaultEndpoint
output HEALTHCARE_AGENT_SERVICE_ENDPOINTS array = !empty(healthcareAgents) ? m_healthcareAgentService!.outputs.healthcareAgentServiceEndpoints : []
output VNET_ID string = m_network.outputs.vnetId
output VNET_NAME string = m_network.outputs.vnetName
output APP_SERVICE_SUBNET_ID string = m_network.outputs.appServiceSubnetId
